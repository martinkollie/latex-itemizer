{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","state","mode","items","charactersToRemove","itemize","bind","removeBullets","handleModeChange","handleRemoveChars","e","values","target","value","split","forEach","item","push","this","setState","chars","join","map","replace","RegExp","console","log","className","src","Logo","alt","onChange","char","type","defaultValue","style","height","width","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a7ba4704.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Logo from './logo.svg';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"itemize\",\n            items: [],\n            charactersToRemove: [\"*\", \"â€¢\"]\n        };\n        this.itemize = this.itemize.bind(this);\n        this.removeBullets = this.removeBullets.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n        this.handleRemoveChars = this.handleRemoveChars.bind(this);\n    }\n\n    itemize(e) {\n        let value = e.target.value;\n        let values = value.split(\"\\n\");\n\n        let items = [];\n        values.forEach(item => items.push(item));\n\n        this.setState({\n            items\n        });\n    }\n\n    removeBullets(e) {\n        let value = e.target.value;\n\n\n        let chars = this.state.charactersToRemove.join(\"|\");\n        let items = this.state.items\n            .map(item => item.replace(new RegExp('['+ chars + ']'), \"\"));\n\n        console.log(items);\n        this.setState({\n            items\n        });\n    }\n\n    handleModeChange(e) {\n        let mode = e.target.value;\n\n\n        this.setState({\n            mode\n        });\n    }\n\n    handleRemoveChars(e) {\n        let mode = e.target.value;\n\n        this.setState({\n            charactersToRemove: e.target.value.split(\",\")\n\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row mb-3\">\n                    <div className=\"col\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n\n                                <div className=\"title\">\n                                    <span><img src={Logo} alt=\"\"/></span>\n                                    <h1 className=\"card-title\">\n                                        LaTeX Itemizer\n                                    </h1>\n                                </div>\n\n                                <div className=\"container p-0 m-0\">\n\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <p>Converts a list into a LaTeX list format.</p>\n\n                                        </div>\n                                    </div>\n\n                                    <hr/>\n                                    <h5>Options</h5>\n\n                                    <div className=\"row\">\n\n\n                                        <div className=\"col-sm-12 col-md-6  \">\n                                            <h6>List types</h6>\n                                            <small className=\"text-muted\">LaTeX package</small>\n                                            <select onChange={this.handleModeChange} className=\"form-control w-75\">\n                                                <option value=\"itemize\">Itemize</option>\n                                                <option value=\"enumerate\">Enumerate</option>\n                                            </select>\n                                        </div>\n\n                                        <div className=\"col-6\">\n                                            <h6>Characters to remove</h6>\n                                            <small className=\"text-muted\">(e.g bullets) comma separated values</small>\n\n                                            <ul>\n                                                {this.state.charactersToRemove.map(char => (<li>{char}</li>))}\n                                            </ul>\n\n\n                                            <input type=\"text\" onChange={(e) => this.handleRemoveChars(e)}\n                                                   defaultValue={this.state.charactersToRemove.join(\",\")}\n                                                   className=\"form-control  w-75\"/>\n\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n\n                    <div className=\"col col-6 mb-3\">\n                        <div className=\"card\" style={{height: \"300px\"}}>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Plain text list</h5>\n                                <textarea onChange={this.itemize} className=\"textarea\"\n                                          style={{width: \"100%\", height: \"80%\"}}/>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\"col col-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body text-left\">\n                                <h5 className=\"card-title\">LaTeX list</h5>\n                                <code>\n                                    \\begin{`${'{' + this.state.mode + '}'}`} <br/> {\n                                    this.state.items.map(item => (\n                                        <span>\\item {item} <br/></span>\n                                    ))\n                                }\n                                    \\end{`${'{' + this.state.mode + '}'}`} <br/>\n                                </code>\n\n                                <button onClick={this.removeBullets}\n                                        className=\"btn btn-primary btn-block mt-3\">Remove characters\n                                </button>\n\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.cbd8b5a8.svg\";"],"sourceRoot":""}