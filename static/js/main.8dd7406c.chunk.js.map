{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mode","items","charactersToRemove","itemize","bind","assertThisInitialized","removeBullets","handleModeChange","handleRemoveChars","e","values","target","value","split","forEach","item","push","setState","map","replace","console","log","_this2","react_default","a","createElement","className","src","Logo","alt","onChange","char","type","defaultValue","join","style","height","width","concat","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8dd7406c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Logo from './logo.svg';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"itemize\",\n            items: [],\n            charactersToRemove: [\"*\", \"•\", \"o\"]\n        };\n        this.itemize = this.itemize.bind(this);\n        this.removeBullets = this.removeBullets.bind(this);\n        this.handleModeChange = this.handleModeChange.bind(this);\n        this.handleRemoveChars = this.handleRemoveChars.bind(this);\n    }\n\n    itemize(e) {\n        let value = e.target.value;\n        let values = value.split(\"\\n\");\n\n        let items = [];\n        values.forEach(item => items.push(item));\n\n        this.setState({\n            items\n        });\n    }\n\n    removeBullets(e) {\n        let value = e.target.value;\n\n\n        let items = this.state.items\n            .map(item => item.replace(/[*|•|o]/g, \"\"));\n\n        console.log(items);\n        this.setState({\n            items\n        });\n    }\n\n    handleModeChange(e) {\n        let mode = e.target.value;\n\n\n        this.setState({\n            mode\n        });\n    }\n\n    handleRemoveChars(e) {\n        let mode = e.target.value;\n\n        this.setState({\n            charactersToRemove: e.target.value.split(\",\")\n\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row mb-3\">\n                    <div className=\"col\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n\n                                <div className=\"title\">\n                                    <span><img src={Logo} alt=\"\"/></span>\n                                    <h1 className=\"card-title\">\n                                        LaTeX Itemizer\n                                    </h1>\n                                </div>\n\n                                <div className=\"container p-0 m-0\">\n\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <p>Converts a list into a LaTeX list format.</p>\n\n                                        </div>\n                                    </div>\n\n                                    <hr/>\n                                    <h5>Options</h5>\n\n                                    <div className=\"row\">\n\n\n                                        <div className=\"col-sm-12 col-md-6  \">\n                                            <h6>List types</h6>\n                                            <small className=\"text-muted\">LaTeX package</small>\n                                            <select onChange={this.handleModeChange} className=\"form-control w-75\">\n                                                <option value=\"itemize\">Itemize</option>\n                                                <option value=\"enumerate\">Enumerate</option>\n                                            </select>\n                                        </div>\n\n                                        <div className=\"col-6\">\n                                            <h6>Characters to remove</h6>\n                                            <small className=\"text-muted\">(e.g bullets) comma separated values</small>\n\n                                            <ul>\n                                                {this.state.charactersToRemove.map(char => (<li>{char}</li>))}\n                                            </ul>\n\n\n                                            <input type=\"text\" onChange={(e) => this.handleRemoveChars(e)}\n                                                   defaultValue={this.state.charactersToRemove.join(\",\")}\n                                                   className=\"form-control  w-75\"/>\n\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n\n                    <div className=\"col col-6 mb-3\">\n                        <div className=\"card\" style={{height: \"300px\"}}>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Plain text list</h5>\n                                <textarea onChange={this.itemize} className=\"textarea\"\n                                          style={{width: \"100%\", height: \"80%\"}}/>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\"col col-6\">\n                        <div className=\"card\">\n                            <div className=\"card-body text-left\">\n                                <h5 className=\"card-title\">LaTeX list</h5>\n                                <code>\n                                    \\begin{`${'{' + this.state.mode + '}'}`} <br/> {\n                                    this.state.items.map(item => (\n                                        <span>\\item {item} <br/></span>\n                                    ))\n                                }\n                                    \\end{`${'{' + this.state.mode + '}'}`} <br/>\n                                </code>\n\n                                <button onClick={this.removeBullets}\n                                        className=\"btn btn-primary btn-block mt-3\">Remove characters\n                                </button>\n\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.cbd8b5a8.svg\";"],"sourceRoot":""}